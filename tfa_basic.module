<?php

/**
 * Implements hook_permission().
 */
function tfa_basic_permission() {
  return array(
    'setup own tfa' => array(
      'title' => t('Set up TFA for account'),
      'description' => t('Allow users to set up TFA for their account. Users with "administer users" permission can edit other account\'s TFA.'),
    ),
  );
}

/**
 * Implements hook_library().
 */
function tfa_basic_library() {
  $items = array();
  $items['qrcodejs'] = array(
    'title' => 'QRCode.js',
    'website' => 'https://github.com/davidshimjs/qrcodejs',
    'version' => '1.0',
    'js' => array(
      drupal_get_path('module', 'tfa_basic') . '/includes/qrcodejs/qrcode.min.js' => array(),
    ),
  );
  return $items;
}

/**
 * Implements hook_menu().
 */
function tfa_basic_menu() {
  $items = array();

  $items['user/%user/tfa'] = array(
    'title' => 'TFA',
    'page callback' => 'tfa_basic_overview',
    'page arguments' => array(1),
    'access callback' => 'tfa_basic_setup_access',
    'access arguments' => array(1, 'setup own tfa'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'tfa_basic.pages.inc',
  );
  $items['user/%user/tfa/disable'] = array(
    'title' => 'TFA disable',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tfa_basic_disable_form', 1),
    'access callback' => 'tfa_basic_setup_access',
    'access arguments' => array(1, 'setup own tfa'),
    'type' => MENU_CALLBACK,
    'file' => 'tfa_basic.pages.inc',
  );
  $items['user/%user/tfa/app-setup'] = array(
    'title' => 'TFA setup',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tfa_basic_setup_form', 1, 'app_setup'),
    'access callback' => 'tfa_basic_setup_access',
    'access arguments' => array(1, 'setup own tfa'),
    'type' => MENU_CALLBACK,
    'file' => 'tfa_basic.pages.inc',
  );
  $items['user/%user/tfa/trusted-browsers'] = array(
    'title' => 'TFA setup',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tfa_basic_setup_form', 1, 'trust_device'),
    'access callback' => 'tfa_basic_setup_access',
    'access arguments' => array(1, 'setup own tfa'),
    'type' => MENU_CALLBACK,
    'file' => 'tfa_basic.pages.inc',
  );

  return $items;
}

/**
 * Access control.
 *
 * @param object $account
 * @param string $permission
 * @return bool
 */
function tfa_basic_setup_access($account, $permission = '') {
  $administer_users = user_access('administer users') && $account->uid > 0;
  $is_account = ($GLOBALS['user']->uid == $account->uid);

  return ($is_account && user_access($permission, $account)) || $administer_users;
}

/**
 * Implements hook_cron().
 */
function tfa_basic_cron() {
  // Delete trusted device entries older than expiration.
  $expiration = variable_get('tfa_basic_trust_cookie_expiration', 3600 * 24 * 30);

  $num_deleted = db_delete('tfa_trusted_device')
    ->condition('created', REQUEST_TIME - $expiration, '<')
    ->execute();
  if ($num_deleted) {
    watchdog('tfa', 'Removed !num TFA trusted browsers older than !time', array('!num' => $num_deleted, '!time' => REQUEST_TIME - $expiration), WATCHDOG_INFO);
  }
}

/**
 * Implements hook_tfa_api().
 */
function tfa_basic_tfa_api() {
  return array(
    'tfa_basic_totp' => array(
      'class' => 'TfaTotp',
      'name' => 'TOTP',
    ),
    'tfa_basic_trusted_device' => array(
      'class' => 'TfaTrustedDevice',
      'name' => 'Trusted Browsers',
    ),
  );
}

/**
 * Alters tfa_context array to set plugins from user settings.
 */
function tfa_basic_tfa_context_alter(&$context) {
  $api = module_invoke_all('tfa_api');

  $account = user_load($context['uid']);
  $tfa_data = tfa_basic_get_tfa_data($account);
  if (empty($tfa_data['status']) || empty($tfa_data['data']['primary'])) {
    return;
  }
  switch ($tfa_data['data']['primary']) {
    case 'app':
      $primary_plugin = 'tfa_basic_totp';
      break;
  }
  // Replace validate plugin with user's.
  if (!empty($primary_plugin) && array_key_exists($primary_plugin, $api)) {
    $context['plugins']['validate'] = $api[$primary_plugin]['class'];
  }
  // If the user setup a fallback method add it.
  if (!empty($fallback_plugin)) {
    array_unshift($context['plugins']['fallback'], $api[$fallback_plugin]['class']);
  }
}

/**
 * Get TFA data for an account
 *
 * @param object $account
 * @return array
 */
function tfa_basic_get_tfa_data($account) {
  $result = db_query("SELECT status, saved, data FROM {tfa_user_settings} WHERE uid = :uid", array(':uid' => $account->uid))->fetchAssoc();
  if (!empty($result)) {
    $data = array();
    if (!empty($result['data'])) {
      $data = json_decode($result['data'], TRUE);
    }
    $tfa = array(
      'status' => $result['status'] == '1' ? TRUE : FALSE,
      'saved' => $result['saved'],
      'data' => $data,
    );
    return $tfa;
  }
  return array();
}

/**
 * Save TFA settings for an account.
 *
 * @param object $account
 * @param array $data TFA data
 * @code
 *   array(
 *     'method' => 'app',
 *     'primary' => FALSE,
 *     'recovery' => TRUE,
 *     'status' => TRUE,
 *   )
 * @endcode
 */
function tfa_basic_setup_save_data($account, $data) {
  // Check if existing data and update.
  $existing = tfa_basic_get_tfa_data($account);
  if (!empty($existing['data'])) {
    $tfa_data = $existing['data'];
  }
  else {
    $tfa_data = array();
  }
  if (isset($data['method'])) {
    $tfa_data['primary'] = $data['method'];
  }
  $status = 1;
  if (isset($data['status']) && $data['status'] === FALSE) {
    $tfa_data = array();
    $status = 0;
    $tfa = new TfaTotp(array('uid' => $account->uid));
    $tfa->deleteSeed();
  }

  $record = array(
    'uid' => $account->uid,
    'saved' => REQUEST_TIME,
    'status' =>  $status,
    'data' => json_encode($tfa_data),
  );
  if (!empty($existing)) {
    drupal_write_record('tfa_user_settings', $record, 'uid');
  }
  else {
    drupal_write_record('tfa_user_settings', $record);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tfa_basic_form_tfa_admin_settings_alter(&$form, &$form_state, $form_id) {
  global $cookie_domain;
  // Add cookie domain field to TFA admin settings.
  $form['tfa_basic_cookie_domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Cookie domain'),
    '#default_value' => variable_get('tfa_basic_cookie_domain', $cookie_domain),
    '#description' => t('Domain to set for the trusted browser TFA cookie.'),
    '#states' => array(
      'visible' => array(
        ':input[name="tfa_login[tfa_basic_trusted_device]"]' => array('checked' => TRUE)
      )
    ),
  );
  $form['#validate'][] = 'tfa_basic_form_validate';
  $form['#submit'][] = 'tfa_basic_form_submit';
}

/**
 * Validation for TFA admin settings alter.
 */
function tfa_basic_form_validate($form, &$form_state) {
  $login = array();
  if (!empty($form_state['values']['tfa_login'])) {
    foreach ($form_state['values']['tfa_login'] as $key => $enabled) {
      if ($enabled) {
        $login[] = $key;
      }
    }

    if (!empty($login) && in_array('tfa_basic_trusted_device', $login) && empty($form_state['values']['tfa_basic_cookie_domain'])) {
      form_set_error('tfa_basic_cookie_domain', t('Cookie domain is required if Trusted Browser plugin is enabled.'));
    }
  }
}

/**
 * Submit for TFA admin settings alter.
 */
function tfa_basic_form_submit($form, &$form_state) {
  if (!empty($form_state['values']['tfa_basic_cookie_domain'])) {
    variable_set('tfa_basic_cookie_domain', $form_state['values']['tfa_basic_cookie_domain']);
  }
}

/**
 * Implements hook_mail().
 */
function tfa_basic_mail($key, &$message, $params) {
  switch ($key) {
    case 'tfa_basic_tfa_enabled':
      $message['subject'] = t('Your @site_name account now has two-factor authentication', array('@site_name' => variable_get('site_name', 'Drupal')));
      $message['body']['body'] = tfa_basic_tfa_enabled_body($message, $params);
      break;

    case 'tfa_basic_disabled_configuration':
      $message['subject'] = t('Your @site_name account no longer has two-factor authentication', array('@site_name' => variable_get('site_name', 'Drupal')));
      $message['body']['body'] = tfa_basic_tfa_disabled_body($message, $params);
      break;

  }
}

/**
 * Returns text appropriate for an email when someone has enabled tfa.
 *
 * @param array $message
 *   The message, must include the language.
 * @param array $params
 *   Parameters from drupal_mail. Must include the account.
 *
 * @return string
 *   Message body.
 */
function tfa_basic_tfa_enabled_body($message, $params) {
  $text = t("[user:name],

Thanks for configuring two-factor authentication on your @site_name account!

This additional level of security will help to ensure that only you are able to log in to your account.

If you ever lose the device you configured, you should act quickly to delete its association with this account.

-- @site_name team", array('@site_name' => variable_get('site_name', 'Drupal')));

  return token_replace($text, array('user' => $params['account']), array('language' => $message['language'], 'sanitize' => FALSE, 'clear' => TRUE));
}

/**
 * Returns text appropriate for an email when someone has disabled tfa.
 *
 * @param array $message
 *   The message, must include the language.
 * @param array $params
 *   Parameters from drupal_mail. Must include the account.
 *
 * @return string
 *   Message body.
 */
function tfa_basic_tfa_disabled_body($message, $params) {
  $text = t("[user:name],

Two-factor authentication has been disabled on your account.

If you did not take this action, please contact a site administrator immediately.

-- @site_name team", array('@site_name' => variable_get('site_name', 'Drupal')));

  return token_replace($text, array('user' => $params['account']), array('language' => $message['language'], 'sanitize' => FALSE, 'clear' => TRUE));
}
