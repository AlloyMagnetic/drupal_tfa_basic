<?php

/**
 * Implements hook_permission().
 */
function tfa_basic_permission() {
  return array(
    'setup own tfa' => array(
      'title' => t('Setup TFA for account'),
      'description' => t('Allow users to setup TFA for their account. Users with "administer users" permission can edit other accounts TFA.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function tfa_basic_menu() {
  $items = array();

  $items['user/%user/tfa'] = array(
    'title' => 'TFA',
    'page callback' => 'tfa_basic_overview',
    'page arguments' => array(1),
    'access callback' => 'tfa_basic_setup_access',
    'access arguments' => array(1, 'setup own tfa'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'tfa_basic.pages.inc',
  );
  $items['user/%user/tfa/disable'] = array(
    'title' => 'TFA disable',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tfa_basic_disable_form', 1),
    'access callback' => 'tfa_basic_setup_access',
    'access arguments' => array(1, 'setup own tfa'),
    'type' => MENU_CALLBACK,
    'file' => 'tfa_basic.pages.inc',
  );
  $items['user/%user/tfa/setup'] = array(
    'title' => 'TFA setup',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tfa_basic_setup_form', 1),
    'access callback' => 'tfa_basic_setup_access',
    'access arguments' => array(1, 'setup own tfa'),
    'type' => MENU_CALLBACK,
    'file' => 'tfa_basic.pages.inc',
  );

  return $items;
}

/**
 * Access control.
 *
 * @param object $account
 * @param string $permission
 * @return bool
 */
function tfa_basic_setup_access($account, $permission = '') {
  $administer_users = user_access('administer users') && $account->uid > 0;
  $is_account = ($GLOBALS['user']->uid == $account->uid);

  return ($is_account && user_access($permission, $account)) || $administer_users;
}

/**
 * Implements hook_cron().
 */
function tfa_basic_cron() {
  // Delete trusted device entries older than expiration.
  $expiration = variable_get('tfa_basic_trust_cookie_expiration', 3600 * 24 * 30);

  $num_deleted = db_delete('tfa_trusted_device')
    ->condition('created', REQUEST_TIME - $expiration, '<')
    ->execute();
  if ($num_deleted) {
    watchdog('TFA', 'Removed !num TFA trusted devices older than !time', array('!num' => $num_deleted, '!time' => REQUEST_TIME - $expiration), WATCHDOG_INFO);
  }
}

/**
 * Implements hook_tfa_api().
 */
function tfa_basic_tfa_api() {
  return array(
    'tfa_basic_totp' => array(
      'class' => 'TfaTotp',
      'name' => 'TOTP',
    ),
    'tfa_basic_trusted_device' => array(
      'class' => 'TfaTrustedDevice',
      'name' => 'Trusted device',
    ),
  );
}

/**
 * Alters tfa_context array to set plugins from user settings.
 */
function tfa_basic_tfa_context_alter(&$context) {
  $api = module_invoke_all('tfa_api');

  $account = user_load($context['uid']);
  $tfa_data = tfa_basic_get_tfa_data($account);
  if (empty($tfa_data['status']) || empty($tfa_data['data']['primary'])) {
    return;
  }
  switch ($tfa_data['data']['primary']) {
    case 'app':
      $primary_plugin = 'tfa_basic_totp';
      break;
  }
  // Replace validate plugin with user's.
  if (!empty($primary_plugin) && array_key_exists($primary_plugin, $api)) {
    $context['plugins']['validate'] = $api[$primary_plugin]['class'];
  }
  // If the user setup a fallback method add it.
  if (!empty($fallback_plugin)) {
    array_unshift($context['plugins']['fallback'], $api[$fallback_plugin]['class']);
  }
}

/**
 * Get TFA data for an account
 *
 * @param object $account
 * @return array
 */
function tfa_basic_get_tfa_data($account) {
  $result = db_query("SELECT status, saved, data FROM {tfa_user_settings} WHERE uid = :uid", array(':uid' => $account->uid))->fetchAssoc();
  if (!empty($result)) {
    $data = array();
    if (!empty($result['data'])) {
      $data = json_decode($result['data'], TRUE);
    }
    $tfa = array(
      'status' => $result['status'] == '1' ? TRUE : FALSE,
      'saved' => $result['saved'],
      'data' => $data,
    );
    return $tfa;
  }
  return array();
}

/**
 * Get accounts trusted devices.
 *
 * @param $account
 * @return array
 *   'id'
 *   'name'
 *   'ip'
 *   'created'
 *   'last_used'
 */
function tfa_basic_get_trusted_devices($account) {
  $devices = array();
  $result = db_query("SELECT did, name, ip, created, last_used FROM {tfa_trusted_device} WHERE uid = :uid", array(':uid' => $account->uid));
  if ($result) {
    foreach ($result as $row) {
      $devices[] = array(
        'id' => $row->did,
        'name' => $row->name,
        'created' => $row->created,
        'ip' => $row->ip,
        'last_used' => $row->last_used,
      );
    }
  }
  return $devices;
}

/**
 * Save TFA settings for an account.
 *
 * @param object $account
 * @param array $data TFA data
 * @code
 *   array(
 *     'method' => 'app',
 *     'primary' => FALSE,
 *     'recovery' => TRUE,
 *     'status' => TRUE,
 *   )
 * @endcode
 */
function tfa_basic_setup_save_data($account, $data) {
  // Check if existing data and update.
  $existing = tfa_basic_get_tfa_data($account);
  if (!empty($existing['data'])) {
    $tfa_data = $existing['data'];
  }
  else {
    $tfa_data = array();
  }
  if (isset($data['method'])) {
    $tfa_data['primary'] = $data['method'];
  }
  $status = 1;
  if (isset($data['status']) && $data['status'] === FALSE) {
    $tfa_data = array();
    $status = 0;
  }

  $record = array(
    'uid' => $account->uid,
    'saved' => REQUEST_TIME,
    'status' =>  $status,
    'data' => json_encode($tfa_data),
  );
  if (!empty($existing)) {
    drupal_write_record('tfa_user_settings', $record, 'uid');
  }
  else {
    drupal_write_record('tfa_user_settings', $record);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function tfa_basic_form_tfa_admin_settings_alter(&$form, &$form_state, $form_id) {
  global $base_url;
  // Add cookie domain field to TFA admin settings.
  $form['tfa_basic_cookie_domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Cookie domain'),
    '#default_value' => variable_get('tfa_basic_cookie_domain', '.' . $base_url),
    '#description' => t('Domain to set for the trusted device TFA cookie.'),
    '#states' => array(
      'visible' => array(
        ':input[name="tfa_login[tfa_basic_trusted_device]"]' => array('checked' => TRUE)
      )
    ),
  );
  $form['#validate'][] = 'tfa_basic_form_validate';
  $form['#submit'][] = 'tfa_basic_form_submit';
}

/**
 * Validation for TFA admin settings alter.
 */
function tfa_basic_form_validate($form, &$form_state) {
  $login = array();
  if (!empty($form_state['values']['tfa_login'])) {
    foreach ($form_state['values']['tfa_login'] as $key => $enabled) {
      if ($enabled) {
        $login[] = $key;
      }
    }

    if (!empty($login) && in_array('tfa_basic_trusted_device', $login) && empty($form_state['values']['tfa_basic_cookie_domain'])) {
      form_set_error('tfa_basic_cookie_domain', t('Cookie domain is required if Trusted device plugin is enabled.'));
    }
  }
}

/**
 * Submit for TFA admin settings alter.
 */
function tfa_basic_form_submit($form, &$form_state) {
  if (!empty($form_state['values']['tfa_basic_cookie_domain'])) {
    variable_set('tfa_basic_cookie_domain', $form_state['values']['tfa_basic_cookie_domain']);
  }
}
